#+title: =org-roam-pygraph= demo
#+author: aatmunbaxi

Here we give a short demo of the capabilities of =org-roam-pygraph=.

Import the libraries we'll need to demo stuff.
#+begin_src python :session python :exports code
import re
import numpy as np

from lib.RoamGraph import RoamGraph

# For visualizing the graph
import matplotlib.pyplot as plt
import networkx as nx
#+end_src

#+RESULTS:


* Basic functionality

We first need a directory to search for =org-roam= files.
(Note we need the trailing "/" and an full path, =~= is not allowed.)
#+begin_src python :session python :exports code
ROAM_DIR = "/your/directory/here/"
#+end_src

#+RESULTS:

#+begin_src python :session python :exports none
ROAM_DIR = "/home/aatmun/Documents/org/roam/"
#+end_src

#+RESULTS:

Then we'll simply create our graph object.
#+begin_src python :session python :exports code
network = RoamGraph(ROAM_DIR)
#+end_src

#+RESULTS:

** Undirected graphs
An undirected graph is determined uniquely by a symmetric adjacency matrix.
#+begin_src python :session python :exports none
adj_matrix = network.adjacency_matrix(directed = False)
#+end_src

#+RESULTS:

Let us visualize the graph we've created.
By default, the adjacency matrix has value =np.inf= for non-incidental nodes; we need to change those to =0= to visualize with =networkx=

Load it as a =networkx= graph and check the viz.
#+begin_src python :session python :exports code
adj_matrix[np.isinf(adj_matrix)] =0
G = nx.from_numpy_array(adj_matrix)
plt.cla()
plt.clf()
nx.draw(G,with_labels=False, node_size=100)
#+end_src

#+RESULTS:
: None

#+begin_src python :session python :exports results :results file :var f="images/viz.svg"
plt.savefig(f)
f
#+end_src
#+RESULTS:
[[file:images/viz.svg]]

(As you can probably see, I've spent more time making this library than building my zettelkasten.)
** Directed Graphs
Of course, all the above has a directed version.
#+begin_src python :session python :exports code
adj_matrix_directed = network.adjacency_matrix(directed = True)
#+end_src

#+RESULTS:

#+begin_src python :session python :exports none
adj_matrix_directed[np.isinf(adj_matrix_directed)] = 0
G_directed = nx.from_numpy_array(adj_matrix_directed, create_using=nx.DiGraph)
plt.cla()
plt.clf()
nx.draw(G_directed,with_labels=False,node_size=100)
#+end_src

#+RESULTS:
: None

#+begin_src python :session python :exports results :results file :var g="images/viz_directed.svg"
plt.savefig(g)
g
#+end_src

#+RESULTS:
[[file:images/viz_directed.svg]]
** Filtering
At present, you may filter by tags to match exactly and/or tags that match a compiled python regex.
For example, if I want to the graph to those nodes that only contain the filetag =algebraic-geometry=, here is what that would look like.
#+begin_src python :session python :exports code
tags = ['algebraic-geometry']
network = RoamGraph(ROAM_DIR, tags_exact = tags, include_exact = True)
#+end_src

#+RESULTS:

#+begin_src python :session python :exports results :results file :var h="images/viz_alg-geo-exact.svg"
adj_matrix = network.adjacency_matrix(directed = False)

adj_matrix[np.isinf(adj_matrix)] =0
G = nx.from_numpy_array(adj_matrix)
plt.cla()
plt.clf()
nx.draw(G,with_labels=False,node_size = 100)
plt.savefig(h)
h
#+end_src

#+RESULTS:
[[file:images/viz_alg-geo-exact.svg]]

Or I can filter by regex to exclude all things matching =alg*= (say, to match "algebraic-geometry" and "algebraic-topology" simultaneously).
#+begin_src python :session python :exports code
rx_tags = [re.compile("alg*")]
network = RoamGraph(ROAM_DIR, tags_rx = rx_tags, include_rx = False)
#+end_src

#+RESULTS:

#+begin_src python :session python :exports results :results file :var k="images/viz_alg-rx.svg"
adj_matrix = network.adjacency_matrix()

adj_matrix[np.isinf(adj_matrix)] =0
G = nx.from_numpy_array(adj_matrix)
plt.cla()
plt.clf()
nx.draw(G,with_labels=False, node_size = 100)
plt.savefig(k)
k
#+end_src

#+RESULTS:
[[file:images/viz_alg-rx.svg]]
* Larger Networks
Just for fun we will visualize jethrokuan's [[https://github.com/jethrokuan/braindump][braindump]] using this library and =networkx=.
#+begin_src python :session python :exports results :results file :var l="images/jethro-braindump.svg"
dir = "/home/aatmun/working/jethrozettel/"

braindump  = RoamGraph(dir)
braindump = braindump.adjacency_matrix(directed=True)
braindump[np.isinf(braindump)] = 0
G = nx.from_numpy_array(braindump)
plt.cla()
plt.clf()
nx.draw(G , with_labels=False, node_size = 3)
plt.savefig(l)
l
#+end_src

#+RESULTS:
[[file:images/jethro-braindump.svg]]

* What to use this for
Anything!
Many graph analysis techniques work with just an adjacency matrix.
Originally I wrote this library to run topological data analysis on the org-roam graph, since the goal of TDA is to reveal "hidden structure" in graphs, just like the zettelkasten promises to reveal "hidden links" between a large knowledge base.
A drop-in solution for TDA is =giotto-tda=, for example, which allows you to run persistent homology analysis on directed and undirected graphs.

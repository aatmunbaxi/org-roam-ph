#+title: =org-roam-pygraph= demo
#+author: aatmunbaxi
#+options: :tangle yes

#+begin_src emacs-lisp :session python :exports none
(pyvenv-activate "~/programming/org-roam-pygraph/.venv")
#+end_src

#+RESULTS:

Here we give a short demo of the capabilities of =org-roam-pygraph=.

Import the libraries we'll need to demo stuff.
#+begin_src python :session python :exports both
import re
import numpy as np

from lib.RoamGraph import RoamGraph

# For visualizing the graph
import matplotlib.pyplot as plt
import networkx as nx
#+end_src

#+RESULTS:

* Basic functionality

We locate our =org-roam= database and create the network from its path.
In my case, it is located at =~/.emacs.d/.local/cache/org-roam.db=.
Yours may vary, depending on if you've specified a custom location.
#+begin_src python :session python :exports code
ROAM_DB = "/path/to/org-roam-db.db"
network = RoamGraph(ROAM_DB)
#+end_src

#+RESULTS:

#+begin_src python :session python :exports results
ROAM_DB = "/home/aatmun/.emacs.d/.local/cache/org-roam.db"
network = RoamGraph(ROAM_DB)
#+end_src

#+RESULTS:

** Undirected graphs
An undirected graph is determined uniquely by a symmetric adjacency matrix.
We can compute this matrix to determine what our graph looks like.
The =RoamGraph= object contains only enough information to generate the graph at the time of construction.
#+begin_src python :session python :exports code
adj_matrix = network.adjacency_matrix(directed = False)
#+end_src

#+RESULTS:

Let us visualize the graph we've created.
By default, the adjacency matrix has value =np.inf= for non-incidental nodes.
We want to visualize with =networkx=, which requires values =0= for non-incidental nodes.
#+begin_src python :session python :exports code
adj_matrix[np.isinf(adj_matrix)] = 0
G = nx.from_numpy_array(adj_matrix)
plt.cla()
plt.clf()
nx.draw(G, with_labels = False, node_size=25)
#+end_src

#+RESULTS:
: None

#+begin_src python :session python :exports results :results file :var f="images/viz.svg"
plt.savefig(f)
f
#+end_src

#+RESULTS:
[[file:images/viz.svg]]

Just for comparison's sake, here is the graph I see in =org-roam-ui=:
[[file:images/orui-viz.png]]
The differences in how they are visualized is due to the internal workings of =networkx=.

We observe some orphan nodes in our graph, you may find yourself wanting to remove them, so let us do that.
#+begin_src python :session python :exports code
orphanless = network.remove_orphans()
#+end_src

#+RESULTS:

#+begin_src python :session python :exports results :results file :var m="images/viz-undir-orphanless.svg"
adj_matrix = orphanless.adjacency_matrix()
adj_matrix[np.isinf(adj_matrix)] = 0
G = nx.from_numpy_array(adj_matrix)
plt.cla()
plt.clf()
nx.draw(G,with_labels=False, node_size=25)
plt.savefig(m)
m
#+end_src

#+RESULTS:
[[file:images/viz-undir-orphanless.svg]]

We also have the ability to generate a =pandas= dataframe from the database with each row and column labelled by the title of the =org-roam= node.
#+begin_src python :session python :exports both :results html :return df.iloc[0:4,0:4].to_html()
df = network.adjacency_df(directed = False, reverse = False)
#+end_src

#+RESULTS:
#+begin_export html
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>q-analog</th>
      <th>group algebra</th>
      <th>ribbon category</th>
      <th>cech cohomology computes sheaf cohomology</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>q-analog</th>
      <td>1.0</td>
      <td>inf</td>
      <td>inf</td>
      <td>inf</td>
    </tr>
    <tr>
      <th>group algebra</th>
      <td>inf</td>
      <td>1.0</td>
      <td>inf</td>
      <td>inf</td>
    </tr>
    <tr>
      <th>ribbon category</th>
      <td>inf</td>
      <td>inf</td>
      <td>1.0</td>
      <td>inf</td>
    </tr>
    <tr>
      <th>cech cohomology computes sheaf cohomology</th>
      <td>inf</td>
      <td>inf</td>
      <td>inf</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
#+end_export

** Directed Graphs
Of course, all the above has a directed version.
Like the undirected case, a directed graph is uniquely determined by an =n x n= matrix with entries =1=, =0=, or =infinity= (all graphs here are unweighted), but it need not be symmetric.
A path =node i -> node j= exists if and only if the =i,j-th= entry of the matrix is =1=.

We can again visualize with =networkx=.
#+begin_src python :session python :exports code
adj_matrix_directed = network.adjacency_matrix(directed = True)
#+end_src

#+RESULTS:

#+begin_src python :session python :exports none
adj_matrix_directed[np.isinf(adj_matrix_directed)] = 0
G_directed = nx.from_numpy_array(adj_matrix_directed, create_using=nx.DiGraph)
plt.cla()
plt.clf()
nx.draw(G_directed,with_labels=False,node_size=25)
#+end_src

#+RESULTS:
: None

#+begin_src python :session python :exports results :results file :var g="images/viz_directed.svg"
plt.savefig(g)
g
#+end_src

#+RESULTS:
[[file:images/viz_directed.svg]]
** Filtering
At present, you may filter by tags to match exactly and/or tags that match a compiled python regex.
For example, if I want to exclude nodes that contain the file tag =fleeting=, here is what that would look like.
#+begin_src python :session python :exports code
tags = ['fleeting']
filtered_network = network.filter_tags(tags, exclude = True)
#+end_src

#+RESULTS:

#+begin_src python :session python :exports results :results file :var h="images/viz_exc_fleet.svg"
adj_matrix = filtered_network.adjacency_matrix(directed = False)

adj_matrix[np.isinf(adj_matrix)] = 0
G = nx.from_numpy_array(adj_matrix)
plt.cla()
plt.clf()
nx.draw(G,with_labels=False,node_size = 25)
plt.savefig(h)
h
#+end_src

#+RESULTS:
[[file:images/viz_exc_fleet.svg]]

Or I can filter by regex to exclude all things matching =alg*= (say, to match =algebraic-geometry= and =algebraic-topology= simultaneously).
#+begin_src python :session python :exports code
rx_tags = ["alg*"]
rx_filtered_network = network.filter_tags(rx_tags, exclude = True, regex = True)
#+end_src

#+RESULTS:

#+begin_src python :session python :exports results :results file :var k="images/viz_alg-rx.svg"
adj_matrix = rx_filtered_network.adjacency_matrix()

adj_matrix[np.isinf(adj_matrix)] = 0
G = nx.from_numpy_array(adj_matrix)
plt.cla()
plt.clf()
nx.draw(G,with_labels=False, node_size = 25)
plt.savefig(k)
k
#+end_src

#+RESULTS:
[[file:images/viz_alg-rx.svg]]
* What to use this for
Many graph analysis techniques work with just an adjacency matrix.
After all, an adjacency/incidence matrix is all you need to complete describe a graph.

Originally I wrote this library to run topological data analysis on the org-roam graph, since the goal of TDA is to reveal "hidden structure" in graphs.
To me this sounded just like the zettelkasten promise to reveal "hidden links" between a large knowledge base.
A drop-in solution for TDA is =giotto-tda=, which allows you to run persistent homology analysis on directed and undirected graphs.
